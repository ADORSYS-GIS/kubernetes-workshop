# Complete Pod Solution with All Best Practices
# This is the "perfect" version of a production-ready pod

apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod-complete
  labels:
    app: nginx
    version: "1.25"
    environment: production
    tier: frontend
  annotations:
    description: "Production-ready nginx pod with all security best practices"
    maintainer: "platform-team@company.com"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9113"
spec:
  # Security Context at Pod Level
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    runAsGroup: 65534
    fsGroup: 65534
    seccompProfile:
      type: RuntimeDefault
    supplementalGroups: [65534]
  
  # DNS Policy and Config
  dnsPolicy: ClusterFirst
  dnsConfig:
    options:
    - name: ndots
      value: "2"
    - name: edns0
  
  # Resource Management
  containers:
  - name: nginx
    image: nginx:1.25-alpine
    imagePullPolicy: IfNotPresent
    
    ports:
    - name: http
      containerPort: 8080
      protocol: TCP
    - name: metrics
      containerPort: 9113
      protocol: TCP
    
    # Resource Limits and Requests
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
        ephemeral-storage: "1Gi"
      limits:
        memory: "128Mi"
        cpu: "500m"
        ephemeral-storage: "2Gi"
    
    # Security Context at Container Level
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
      runAsGroup: 65534
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
        add: [] # No capabilities needed
    
    # Environment Variables
    env:
    - name: NGINX_PORT
      value: "8080"
    - name: NGINX_WORKER_PROCESSES
      value: "auto"
    - name: NGINX_WORKER_CONNECTIONS
      value: "1024"
    - name: POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: POD_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    
    # Health Checks
    startupProbe:
      httpGet:
        path: /
        port: http
        scheme: HTTP
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 6
      successThreshold: 1
    
    readinessProbe:
      httpGet:
        path: /
        port: http
        scheme: HTTP
      initialDelaySeconds: 5
      periodSeconds: 3
      timeoutSeconds: 2
      failureThreshold: 3
      successThreshold: 1
    
    livenessProbe:
      httpGet:
        path: /
        port: http
        scheme: HTTP
      initialDelaySeconds: 15
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
    
    # Volume Mounts
    volumeMounts:
    - name: nginx-config
      mountPath: /etc/nginx/nginx.conf
      subPath: nginx.conf
      readOnly: true
    - name: html-content
      mountPath: /usr/share/nginx/html
      readOnly: true
    - name: tmp-volume
      mountPath: /tmp
    - name: var-cache
      mountPath: /var/cache/nginx
    - name: var-run
      mountPath: /var/run
    - name: var-log
      mountPath: /var/log/nginx
  
  # Sidecar Container for Metrics
  - name: nginx-exporter
    image: nginx/nginx-prometheus-exporter:0.11.0
    imagePullPolicy: IfNotPresent
    
    ports:
    - name: metrics
      containerPort: 9113
      protocol: TCP
    
    args:
    - -nginx.scrape-uri=http://localhost:8080/nginx_status
    
    resources:
      requests:
        memory: "16Mi"
        cpu: "100m"
      limits:
        memory: "32Mi"
        cpu: "200m"
    
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
    
    livenessProbe:
      httpGet:
        path: /metrics
        port: metrics
      initialDelaySeconds: 10
      periodSeconds: 10
    
    readinessProbe:
      httpGet:
        path: /metrics
        port: metrics
      initialDelaySeconds: 5
      periodSeconds: 5
  
  # Volumes
  volumes:
  - name: nginx-config
    configMap:
      name: nginx-config
      defaultMode: 0644
  - name: html-content
    configMap:
      name: html-content
      defaultMode: 0644
  - name: tmp-volume
    emptyDir:
      sizeLimit: "100Mi"
  - name: var-cache
    emptyDir:
      sizeLimit: "100Mi"
  - name: var-run
    emptyDir:
      sizeLimit: "10Mi"
  - name: var-log
    emptyDir:
      sizeLimit: "100Mi"
  
  # Scheduling Constraints
  nodeSelector:
    kubernetes.io/arch: amd64
  
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: node-type
            operator: In
            values: ["frontend"]
  
  tolerations:
  - key: "frontend-only"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"
  
  # Termination Grace Period
  terminationGracePeriodSeconds: 30
  
  # Restart Policy
  restartPolicy: Always

---
# Supporting ConfigMaps
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  labels:
    app: nginx
    component: config
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /var/log/nginx/access.log main;
        
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
        
        server {
            listen 8080;
            server_name _;
            
            location / {
                root /usr/share/nginx/html;
                index index.html index.htm;
                try_files $uri $uri/ =404;
            }
            
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            location /nginx_status {
                stub_status on;
                access_log off;
                allow 127.0.0.1;
                allow ::1;
                deny all;
            }
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: html-content
  labels:
    app: nginx
    component: content
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Kubernetes Workshop - Pod Solution</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
            .container { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .header { color: #326CE5; border-bottom: 2px solid #326CE5; padding-bottom: 10px; }
            .info { margin: 20px 0; padding: 15px; background: #f0f8ff; border-radius: 5px; }
            .success { color: #28a745; font-weight: bold; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1 class="header">ðŸš€ Kubernetes Workshop</h1>
            <h2 class="success">âœ… Pod Solution Working!</h2>
            <div class="info">
                <h3>This demonstrates:</h3>
                <ul>
                    <li>âœ… Security-first configuration</li>
                    <li>âœ… Resource management</li>
                    <li>âœ… Health checks</li>
                    <li>âœ… Multi-container patterns</li>
                    <li>âœ… Configuration management</li>
                    <li>âœ… Monitoring integration</li>
                </ul>
            </div>
            <p><strong>Pod Name:</strong> <span id="pod-name">Loading...</span></p>
            <p><strong>Namespace:</strong> <span id="namespace">Loading...</span></p>
            <p><strong>Node:</strong> <span id="node">Loading...</span></p>
        </div>
        <script>
            // This would normally get values from environment variables or APIs
            document.getElementById('pod-name').textContent = 'nginx-pod-complete';
            document.getElementById('namespace').textContent = 'default';
            document.getElementById('node').textContent = 'minikube';
        </script>
    </body>
    </html>
# Pod demonstrating ConfigMap usage
apiVersion: v1
kind: Pod
metadata:
  name: config-demo
  labels:
    app: config-demo
spec:
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    fsGroup: 65534
  containers:
  - name: nginx
    image: nginx:1.25-alpine
    ports:
    - containerPort: 8080
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "500m"
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
    
    # Environment variables from ConfigMap
    env:
    - name: DATABASE_HOST
      valueFrom:
        configMapKeyRef:
          name: app-config
          key: database_host
    - name: DATABASE_PORT
      valueFrom:
        configMapKeyRef:
          name: app-config
          key: database_port
    - name: LOG_LEVEL
      valueFrom:
        configMapKeyRef:
          name: app-config
          key: log_level
    - name: APP_NAME
      valueFrom:
        configMapKeyRef:
          name: app-config
          key: app_name
    
    # Volume mounts for configuration files
    volumeMounts:
    - name: app-config-volume
      mountPath: /etc/config
      readOnly: true
    - name: nginx-config
      mountPath: /etc/nginx/nginx.conf
      subPath: nginx.conf
      readOnly: true
    - name: tmp-volume
      mountPath: /tmp
    - name: var-cache
      mountPath: /var/cache/nginx
    - name: var-run
      mountPath: /var/run
  
  volumes:
  - name: app-config-volume
    configMap:
      name: app-config
  - name: nginx-config
    configMap:
      name: app-config
      items:
      - key: nginx.conf
        path: nginx.conf
  - name: tmp-volume
    emptyDir: {}
  - name: var-cache
    emptyDir: {}
  - name: var-run
    emptyDir: {}

---
# Pod demonstrating Secret usage
apiVersion: v1
kind: Pod
metadata:
  name: secret-demo
  labels:
    app: secret-demo
spec:
  # Disable service account token auto-mounting for security
  automountServiceAccountToken: false
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    fsGroup: 65534
  containers:
  - name: app
    image: busybox:1.35
    command: ["/bin/sh", "-c"]
    args:
    - |
      echo "Starting application with secrets..."
      echo "Username: $(cat /etc/secrets/username)"
      echo "Database URL: $DATABASE_URL"
      echo "API Key configured: $(test -f /etc/secrets/api_key && echo 'Yes' || echo 'No')"
      sleep 3600
    resources:
      requests:
        memory: "32Mi"
        cpu: "100m"
      limits:
        memory: "64Mi"
        cpu: "200m"
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
    
    # Environment variables from Secret
    env:
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: app-secret
          key: database_url
    - name: API_KEY
      valueFrom:
        secretKeyRef:
          name: app-secret
          key: api_key
    
    # Volume mounts for secret files
    volumeMounts:
    - name: secret-volume
      mountPath: /etc/secrets
      readOnly: true
    - name: tmp-volume
      mountPath: /tmp
  
  volumes:
  - name: secret-volume
    secret:
      secretName: app-secret
      # Set file permissions (octal notation)
      defaultMode: 0600
      items:
      - key: username
        path: username
        mode: 0644
      - key: password
        path: password
        mode: 0600
      - key: api_key
        path: api_key
        mode: 0600
  - name: tmp-volume
    emptyDir: {}

---
# Pod showing environment-specific configuration
apiVersion: v1
kind: Pod
metadata:
  name: env-config-demo
  labels:
    app: env-config-demo
    environment: development
spec:
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
  containers:
  - name: app
    image: busybox:1.35
    command: ["/bin/sh", "-c"]
    args:
    - |
      echo "Environment: $ENVIRONMENT"
      echo "Debug Mode: $DEBUG"
      echo "Database Host: $DATABASE_HOST"
      echo "Redis Host: $REDIS_HOST"
      echo "Log Level: $LOG_LEVEL"
      sleep 3600
    resources:
      requests:
        memory: "32Mi"
        cpu: "100m"
      limits:
        memory: "64Mi"
        cpu: "200m"
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
    
    # Load all environment variables from ConfigMap
    envFrom:
    - configMapRef:
        name: development-config
    
    volumeMounts:
    - name: tmp-volume
      mountPath: /tmp
  
  volumes:
  - name: tmp-volume
    emptyDir: {}

---
# Pod using registry secret for private image
apiVersion: v1
kind: Pod
metadata:
  name: private-registry-demo
  labels:
    app: private-registry-demo
spec:
  # Image pull secret for private registry
  imagePullSecrets:
  - name: registry-secret
  
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
  containers:
  - name: app
    # This would be a private registry image
    image: busybox:1.35
    command: ["/bin/sh", "-c"]
    args:
    - |
      echo "Running application from private registry"
      echo "Image pulled successfully with registry secret"
      sleep 3600
    resources:
      requests:
        memory: "32Mi"
        cpu: "100m"
      limits:
        memory: "64Mi"
        cpu: "200m"
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
    volumeMounts:
    - name: tmp-volume
      mountPath: /tmp
  
  volumes:
  - name: tmp-volume
    emptyDir: {}

---
# Pod demonstrating TLS certificate usage
apiVersion: v1
kind: Pod
metadata:
  name: tls-demo
  labels:
    app: tls-demo
spec:
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    fsGroup: 65534
  containers:
  - name: nginx
    image: nginx:1.25-alpine
    ports:
    - containerPort: 8443
      name: https
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "500m"
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
    
    volumeMounts:
    - name: tls-certs
      mountPath: /etc/ssl/certs/app
      readOnly: true
    - name: nginx-tls-config
      mountPath: /etc/nginx/nginx.conf
      subPath: nginx.conf
      readOnly: true
    - name: tmp-volume
      mountPath: /tmp
    - name: var-cache
      mountPath: /var/cache/nginx
    - name: var-run
      mountPath: /var/run
  
  volumes:
  - name: tls-certs
    secret:
      secretName: tls-secret
      defaultMode: 0400
  - name: nginx-tls-config
    configMap:
      name: nginx-tls-config
  - name: tmp-volume
    emptyDir: {}
  - name: var-cache
    emptyDir: {}
  - name: var-run
    emptyDir: {}

---
# ConfigMap for TLS nginx configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-tls-config
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        server {
            listen 8443 ssl;
            server_name _;
            
            ssl_certificate /etc/ssl/certs/app/tls.crt;
            ssl_certificate_key /etc/ssl/certs/app/tls.key;
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers HIGH:!aNULL:!MD5;
            
            location / {
                return 200 "HTTPS is working with TLS certificate!\n";
                add_header Content-Type text/plain;
            }
            
            location /health {
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
    }
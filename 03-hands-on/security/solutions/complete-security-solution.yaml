# Complete Security Solution
# Production-ready security implementation with defense-in-depth

# Pod Security Standards Namespaces
apiVersion: v1
kind: Namespace
metadata:
  name: secure-production
  labels:
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted  
    pod-security.kubernetes.io/warn: restricted
    environment: production
    security-tier: high
---
# RBAC: Service Accounts
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secure-app-sa
  namespace: secure-production
  labels:
    app: secure-app
    security.kubernetes.io/role: application
automountServiceAccountToken: false

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: monitoring-sa
  namespace: secure-production
  labels:
    app: monitoring
    security.kubernetes.io/role: monitoring
automountServiceAccountToken: false

---
# RBAC: Roles
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: secure-production
  name: app-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
  resourceNames: ["app-config", "app-secret"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: secure-production
  name: monitoring-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get", "list"]

---
# RBAC: RoleBindings
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: app-binding
  namespace: secure-production
subjects:
- kind: ServiceAccount
  name: secure-app-sa
  namespace: secure-production
roleRef:
  kind: Role
  name: app-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: monitoring-binding
  namespace: secure-production
subjects:
- kind: ServiceAccount
  name: monitoring-sa
  namespace: secure-production
roleRef:
  kind: Role
  name: monitoring-role
  apiGroup: rbac.authorization.k8s.io

---
# Network Policies: Default deny-all
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: secure-production
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

---
# Network Policy: Allow app-to-database
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-app-to-db
  namespace: secure-production
spec:
  podSelector:
    matchLabels:
      app: secure-app
  policyTypes:
  - Egress
  egress:
  # Allow connection to database
  - to:
    - podSelector:
        matchLabels:
          app: database
    ports:
    - protocol: TCP
      port: 5432
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow HTTPS to external services
  - to: []
    ports:
    - protocol: TCP
      port: 443

---
# Network Policy: Allow ingress to app
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ingress-to-app
  namespace: secure-production
spec:
  podSelector:
    matchLabels:
      app: secure-app
  policyTypes:
  - Ingress
  ingress:
  # Allow from ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  # Allow from monitoring
  - from:
    - podSelector:
        matchLabels:
          app: monitoring
    ports:
    - protocol: TCP
      port: 9090

---
# Network Policy: Database security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: database-security
  namespace: secure-production
spec:
  podSelector:
    matchLabels:
      app: database
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Only allow from application pods
  - from:
    - podSelector:
        matchLabels:
          app: secure-app
    ports:
    - protocol: TCP
      port: 5432
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow NTP
  - to: []
    ports:
    - protocol: UDP
      port: 123

---
# Secure Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: secure-app
  namespace: secure-production
  labels:
    app: secure-app
    version: v1.0.0
    security.kubernetes.io/hardened: "true"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: secure-app
  template:
    metadata:
      labels:
        app: secure-app
        version: v1.0.0
        security.kubernetes.io/hardened: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        security.kubernetes.io/scan-date: "2024-01-15"
        security.kubernetes.io/policy-version: "v1.2"
    spec:
      serviceAccountName: secure-app-sa
      automountServiceAccountToken: false
      
      # Pod-level security context (restricted PSS compliance)
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: [65534]
        sysctls: []
      
      containers:
      - name: app
        image: nginx:1.25-alpine@sha256:2d194b87c1e5b0f3c30b2d3c5b4f8a3c7d8e9f0a1b2c3d4e5f6789abcdef012
        imagePullPolicy: IfNotPresent
        
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
            ephemeral-storage: "500Mi"
          limits:
            memory: "128Mi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
        
        # Container-level security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          procMount: Default
          seccompProfile:
            type: RuntimeDefault
        
        env:
        - name: APP_ENV
          value: "production"
        - name: SECURITY_MODE
          value: "strict"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        
        # Comprehensive health checks
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 3
          periodSeconds: 3
          timeoutSeconds: 2
          failureThreshold: 3
          successThreshold: 1
        
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        - name: html-content
          mountPath: /usr/share/nginx/html
          readOnly: true
        - name: app-secrets
          mountPath: /etc/app/secrets
          readOnly: true
        - name: tmp-volume
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache/nginx
        - name: var-run
          mountPath: /var/run
        - name: var-log
          mountPath: /var/log/nginx
      
      # Security sidecar for monitoring
      - name: security-monitor
        image: busybox:1.35-uclibc@sha256:3d4d9ac7d1022c6c8b6f0e127c3b3b7f8f4f8e2d1c3a4b5c6d7e8f9a0b1c2d3e
        imagePullPolicy: IfNotPresent
        
        command: ["/bin/sh", "-c"]
        args:
        - |
          while true; do
            echo "$(date): Security monitoring active"
            # Monitor for suspicious activity
            ps aux
            netstat -tuln 2>/dev/null || echo "netstat not available"
            sleep 300
          done
        
        resources:
          requests:
            memory: "16Mi"
            cpu: "50m"
          limits:
            memory: "32Mi"
            cpu: "100m"
        
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
      
      volumes:
      - name: nginx-config
        configMap:
          name: secure-nginx-config
          defaultMode: 0644
      - name: html-content
        configMap:
          name: secure-app-content
          defaultMode: 0644
      - name: app-secrets
        secret:
          secretName: secure-app-secret
          defaultMode: 0400
      - name: tmp-volume
        emptyDir:
          sizeLimit: "100Mi"
      - name: var-cache
        emptyDir:
          sizeLimit: "100Mi"
      - name: var-run
        emptyDir:
          sizeLimit: "10Mi"
      - name: var-log
        emptyDir:
          sizeLimit: "100Mi"
      
      # Advanced scheduling and security
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - secure-app
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: security.kubernetes.io/hardened
                operator: In
                values:
                - "true"
      
      tolerations:
      - key: "security"
        operator: "Equal"
        value: "required"
        effect: "NoSchedule"
      
      terminationGracePeriodSeconds: 30
      
      # DNS and security policies
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0

---
# Secure Database Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: secure-database
  namespace: secure-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
        security.kubernetes.io/hardened: "true"
    spec:
      serviceAccountName: monitoring-sa
      automountServiceAccountToken: false
      
      securityContext:
        runAsNonRoot: true
        runAsUser: 70  # postgres user
        runAsGroup: 70
        fsGroup: 70
        seccompProfile:
          type: RuntimeDefault
      
      containers:
      - name: postgres
        image: postgres:15-alpine@sha256:7c4c1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1
        imagePullPolicy: IfNotPresent
        
        ports:
        - containerPort: 5432
          name: postgres
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        securityContext:
          runAsNonRoot: true
          runAsUser: 70
          runAsGroup: 70
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        
        env:
        - name: POSTGRES_DB
          value: "secureapp"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: password
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-run
          mountPath: /var/run/postgresql
        - name: tmp-volume
          mountPath: /tmp
        
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1
          initialDelaySeconds: 5
          periodSeconds: 3
          timeoutSeconds: 2
          failureThreshold: 3
      
      volumes:
      - name: postgres-data
        emptyDir:
          sizeLimit: "1Gi"
      - name: postgres-run
        emptyDir:
          sizeLimit: "100Mi"
      - name: tmp-volume
        emptyDir:
          sizeLimit: "100Mi"

---
# Supporting ConfigMaps and Secrets
apiVersion: v1
kind: ConfigMap
metadata:
  name: secure-nginx-config
  namespace: secure-production
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';" always;
        
        # Hide nginx version
        server_tokens off;
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        
        # Logging
        log_format security '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$http_user_agent" '
                           '$request_time $upstream_response_time';
        
        access_log /var/log/nginx/access.log security;
        
        server {
            listen 8080;
            server_name _;
            
            # Rate limiting
            limit_req zone=api burst=20 nodelay;
            
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            location /ready {
                access_log off;
                return 200 "ready\n";
                add_header Content-Type text/plain;
            }
            
            location /metrics {
                access_log off;
                stub_status on;
                allow 10.0.0.0/8;
                allow 172.16.0.0/12;
                allow 192.168.0.0/16;
                deny all;
            }
            
            location / {
                root /usr/share/nginx/html;
                index index.html;
                try_files $uri $uri/ =404;
                
                # Security headers for content
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
                add_header Expires "0";
            }
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: secure-app-content
  namespace: secure-production
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Secure Application - Kubernetes Security Demo</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f0f8ff; }
            .container { background: white; padding: 30px; border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.1); }
            .header { color: #d32f2f; border-bottom: 3px solid #d32f2f; padding-bottom: 15px; margin-bottom: 20px; }
            .security-badge { background: #4caf50; color: white; padding: 8px 16px; border-radius: 20px; display: inline-block; margin: 10px 5px; }
            .feature { background: #e3f2fd; padding: 15px; margin: 10px 0; border-left: 4px solid #2196f3; border-radius: 4px; }
            .status { display: flex; justify-content: space-between; align-items: center; margin: 10px 0; }
            .success { color: #4caf50; font-weight: bold; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1 class="header">🛡️ Secure Kubernetes Application</h1>
            
            <div class="security-badge">Pod Security Standards: Restricted</div>
            <div class="security-badge">RBAC: Enabled</div>
            <div class="security-badge">Network Policies: Active</div>
            <div class="security-badge">Non-Root User</div>
            <div class="security-badge">Read-Only Filesystem</div>
            
            <h2>Security Features</h2>
            <div class="feature">
                <h3>🔐 Pod Security Standards</h3>
                <p>Running under <strong>restricted</strong> Pod Security Standards with non-root user, read-only filesystem, and dropped capabilities.</p>
            </div>
            
            <div class="feature">
                <h3>🎭 RBAC (Role-Based Access Control)</h3>
                <p>Service account with minimal required permissions. No unnecessary cluster access.</p>
            </div>
            
            <div class="feature">
                <h3>🌐 Network Policies</h3>
                <p>Default-deny network policies with explicit allow rules for required communication only.</p>
            </div>
            
            <div class="feature">
                <h3>🔒 Secret Management</h3>
                <p>Secrets mounted as files with restricted permissions (0400). No secrets in environment variables.</p>
            </div>
            
            <div class="feature">
                <h3>📦 Container Security</h3>
                <p>Distroless/minimal base images, vulnerability scanning, image signing verification.</p>
            </div>
            
            <h2>Security Status</h2>
            <div class="status">
                <span>Security Context:</span>
                <span class="success">✅ Non-root, Read-only FS, No capabilities</span>
            </div>
            <div class="status">
                <span>Network Isolation:</span>
                <span class="success">✅ Network policies active</span>
            </div>
            <div class="status">
                <span>Resource Limits:</span>
                <span class="success">✅ CPU and memory limits set</span>
            </div>
            <div class="status">
                <span>Image Security:</span>
                <span class="success">✅ Digest pinned, signed image</span>
            </div>
        </div>
    </body>
    </html>

---
# Application Secrets
apiVersion: v1
kind: Secret
metadata:
  name: secure-app-secret
  namespace: secure-production
type: Opaque
data:
  api-key: c2VjdXJlLWFwaS1rZXktMjAyNA==  # secure-api-key-2024
  jwt-secret: and0LXNlY3JldC1mb3Itc2lnbmluZy0yMDI0  # jwt-secret-for-signing-2024

---
apiVersion: v1
kind: Secret
metadata:
  name: database-secret
  namespace: secure-production
type: Opaque
data:
  username: c2VjdXJldXNlcg==  # secureuser
  password: U3VwZXJTZWN1cmVQYXNzMjAyNCE=  # SuperSecurePass2024!

---
# Services
apiVersion: v1
kind: Service
metadata:
  name: secure-app-service
  namespace: secure-production
  labels:
    app: secure-app
spec:
  selector:
    app: secure-app
  ports:
  - name: http
    port: 80
    targetPort: http
  - name: metrics
    port: 9090
    targetPort: metrics
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: database-service
  namespace: secure-production
  labels:
    app: database
spec:
  selector:
    app: database
  ports:
  - name: postgres
    port: 5432
    targetPort: postgres
  type: ClusterIP
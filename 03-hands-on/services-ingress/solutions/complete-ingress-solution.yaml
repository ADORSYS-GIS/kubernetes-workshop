# Complete Ingress Solution with Advanced Features
# Production-ready ingress configuration with TLS, rate limiting, and security headers

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: production-ingress
  annotations:
    # Basic ingress configuration
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'";
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-rps: "100"
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    
    # SSL configuration
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # Load balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$binary_remote_addr"
    nginx.ingress.kubernetes.io/load-balance: "round_robin"
    
    # Timeouts and buffering
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    
    # CORS configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    
    # Monitoring
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    prometheus.io/scrape: "true"
    prometheus.io/port: "10254"

spec:
  # TLS configuration
  tls:
  - hosts:
    - api.example.com
    - app.example.com
    - admin.example.com
    secretName: production-tls-secret
  
  # Routing rules
  rules:
  # API service routing
  - host: api.example.com
    http:
      paths:
      - path: /v1/health
        pathType: Exact
        backend:
          service:
            name: health-service
            port:
              number: 80
      - path: /v1/users
        pathType: Prefix
        backend:
          service:
            name: user-service
            port:
              number: 80
      - path: /v1/orders
        pathType: Prefix
        backend:
          service:
            name: order-service
            port:
              number: 80
      - path: /v1/
        pathType: Prefix
        backend:
          service:
            name: api-gateway
            port:
              number: 80
  
  # Frontend application routing
  - host: app.example.com
    http:
      paths:
      - path: /static
        pathType: Prefix
        backend:
          service:
            name: static-assets
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: api-gateway
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
  
  # Admin interface routing
  - host: admin.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: admin-service
            port:
              number: 80

---
# Supporting services for the ingress
apiVersion: v1
kind: Service
metadata:
  name: health-service
  labels:
    app: health-service
spec:
  selector:
    app: health-service
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: health-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: health-service
  template:
    metadata:
      labels:
        app: health-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: health-service
        image: nginx:1.25-alpine
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            memory: "32Mi"
            cpu: "100m"
          limits:
            memory: "64Mi"
            cpu: "200m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 3
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache/nginx
        - name: var-run
          mountPath: /var/run
        - name: html-content
          mountPath: /usr/share/nginx/html
          readOnly: true
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: var-cache
        emptyDir: {}
      - name: var-run
        emptyDir: {}
      - name: html-content
        configMap:
          name: health-content
      - name: nginx-config
        configMap:
          name: health-nginx-config

---
# ConfigMap for health service content
apiVersion: v1
kind: ConfigMap
metadata:
  name: health-content
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Health Check</title>
        <meta charset="utf-8">
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f0f8ff; }
            .container { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .status { color: #28a745; font-size: 24px; font-weight: bold; }
            .details { margin-top: 20px; }
            .metric { display: flex; justify-content: space-between; margin: 5px 0; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>ðŸš€ Health Check Service</h1>
            <div class="status">âœ… Service is healthy</div>
            <div class="details">
                <h3>Service Details:</h3>
                <div class="metric"><span>Status:</span><span>OK</span></div>
                <div class="metric"><span>Uptime:</span><span id="uptime">Loading...</span></div>
                <div class="metric"><span>Version:</span><span>1.0.0</span></div>
                <div class="metric"><span>Environment:</span><span>Production</span></div>
            </div>
        </div>
        <script>
            document.getElementById('uptime').textContent = Math.floor(Math.random() * 86400) + ' seconds';
        </script>
    </body>
    </html>
  health: |
    OK

---
# ConfigMap for nginx configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: health-nginx-config
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /var/log/nginx/access.log main;
        
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
        
        server {
            listen 8080;
            server_name _;
            
            location / {
                root /usr/share/nginx/html;
                index index.html;
                try_files $uri $uri/ =404;
                
                # Security headers
                add_header X-Frame-Options "SAMEORIGIN" always;
                add_header X-Content-Type-Options "nosniff" always;
                add_header X-XSS-Protection "1; mode=block" always;
            }
            
            location /health {
                root /usr/share/nginx/html;
                try_files /health /health.txt =404;
                access_log off;
                
                add_header Content-Type text/plain;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
            }
            
            location /metrics {
                # Stub status for monitoring
                stub_status on;
                access_log off;
                allow 127.0.0.1;
                allow 10.0.0.0/8;
                allow 172.16.0.0/12;
                allow 192.168.0.0/16;
                deny all;
            }
        }
    }

---
# Network Policy for ingress traffic control
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-network-policy
spec:
  podSelector:
    matchLabels:
      app: health-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress controller traffic
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  # Allow monitoring traffic
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# ServiceMonitor for Prometheus scraping
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: health-service-monitor
  labels:
    app: health-service
spec:
  selector:
    matchLabels:
      app: health-service
  endpoints:
  - port: http
    interval: 30s
    path: /metrics